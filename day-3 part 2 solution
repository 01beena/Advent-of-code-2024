import re

def sum_mul_results_with_conditions(corrupted_memory):
    # Regular expressions to match valid mul(X,Y), do(), and don't() instructions
    mul_pattern = r"mul\((\d{1,3}),(\d{1,3})\)"
    do_pattern = r"do\(\)"
    dont_pattern = r"don't\(\)"

    # Find all occurrences of mul, do, and don't instructions in the corrupted memory
    mul_matches = re.finditer(mul_pattern, corrupted_memory)
    do_matches = re.finditer(do_pattern, corrupted_memory)
    dont_matches = re.finditer(dont_pattern, corrupted_memory)

    # Collect all instructions with their positions
    instructions = []
    instructions.extend([(match.start(), "mul", match.groups()) for match in mul_matches])
    instructions.extend([(match.start(), "do") for match in do_matches])
    instructions.extend([(match.start(), "don't") for match in dont_matches])

    # Sort instructions by position in the memory
    instructions.sort()

    # Track whether mul instructions are enabled
    mul_enabled = True
    total = 0

    # Process instructions in order
    for position, instr_type, *args in instructions:
        if instr_type == "do":
            mul_enabled = True
        elif instr_type == "don't":
            mul_enabled = False
        elif instr_type == "mul" and mul_enabled:
            x, y = map(int, args[0])  # Extract the integers from the match
            total += x * y

    return total

# Example corrupted memory input for Part Two
# corrupted_memory = "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"

with open("./input.txt", "r") as f:
    corrupted_memory = f.read()

# Call the function and print the result
result = sum_mul_results_with_conditions(corrupted_memory)
print("Total sum of valid mul results with conditions:", result)
