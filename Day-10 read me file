# Lava Island Hiking Guide: Trailhead Scores

Welcome to **Lava Island**, a floating sky island filled with mysteries and an unusual volcanic landscape! In this project, you'll dive into decoding the hiking trails that traverse this unique terrain.

## Problem Description

You find yourself at a **Lava Production Facility** with a reindeer guide holding a charred copy of the *Lava Island Hiking Guide*. Only a blank topographic map and cryptic hints about missing hiking trails remain.

### Topographic Map
The map is a grid where each cell represents a height from `0` (lowest) to `9` (highest). Your task is to identify **hiking trails** that:
1. Begin at a **trailhead** (height `0`).
2. Increment sequentially by `1` for each step.
3. End at a cell of height `9`.
4. Use only valid moves: **up, down, left, or right**.

### Goals
1. Identify all trailheads (height `0` positions).
2. Compute the **trailhead rating** as the number of unique hiking trails starting from each trailhead and ending at height `9`.
3. Calculate the total sum of trailhead ratings for the entire map.

---

## Features

### Core Algorithms
- **Trail Exploration**: Depth-First Search (DFS) ensures all possible paths from `0` to `9` are explored while avoiding revisiting cells.
- **Path Deduplication**: Distinct trails are stored using sets to avoid overcounting paths.
- **Dynamic Trail Scoring**: Each trailhead is rated based on the number of unique valid trails reaching height `9`.

### Example Input
The input is a text file (`input.txt`) with a topographic map:
```
0123456789
0111111119
0123456789
0000000009
```

### Example Output
For the above map:
```
Total sum of trailhead ratings: 12
```

---

## Usage

### Input Format
1. A file named `input.txt` containing the topographic map.
2. Each line represents a row, and each character represents a cell's height.

### Running the Program
1. Place the `input.txt` file in the same directory as the program.
2. Run the script using Python:
   ```bash
   python lava_island_hiking_guide.py
   ```
3. The program outputs the total sum of trailhead ratings.

---

## Code Structure

### Key Functions
- **`parse_map(file_path)`**: Reads the map file and converts it into a 2D grid.
- **`dfs_count_trails(topographic_map, r, c)`**: Performs DFS to calculate distinct trails starting at `(r, c)`.
- **`calculate_trailhead_ratings(topographic_map)`**: Computes and sums ratings for all trailheads.
- **`main()`**: Orchestrates reading the input, processing the map, and displaying the result.

---

## Technical Highlights

### Efficiency
- **Pruning Invalid Paths**: DFS terminates when a non-sequential height or out-of-bound move is encountered.
- **Trail Uniqueness**: By tracking paths as tuples in a set, we ensure each valid trail is counted only once.

### Modularity
Each function handles a distinct aspect of the problem, allowing for easy debugging and expansion.

---

## Possible Enhancements
1. **Visualization**: Display the topographic map with highlighted trails.
2. **Interactive Input**: Allow users to input maps directly or modify `input.txt` dynamically.
3. **Performance Optimization**: Implement memoization or breadth-first search (BFS) for complex maps.

---

## Summary
This project provides a fun and challenging exercise in pathfinding and algorithmic exploration. From lava trails to reindeer guides, it‚Äôs a computational adventure like no other!

Ready to explore the sky island and solve the puzzle? üèûÔ∏è
